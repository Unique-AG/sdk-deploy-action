name: 'Deploy Unique SDK Modules'
description: 'Composite action to deploy a Python module developed with the Unique SDK to Azure Container Apps'
inputs:
  module:
    description: 'Name of the module to deploy'
    required: true
    type: string
  environment:
    description: 'Name of the environment to deploy the module to'
    required: true
    type: string
  resource_group_name:
    description: 'Name of the resource group to deploy the module to'
    required: true
    type: string
  acr_login_server:
    description: 'Azure Container Registry login server'
    required: true
    type: string
  azure_client_id:
    description: 'Azure client ID'
    required: true
    type: string
  azure_tenant_id:
    description: 'Azure tenant ID'
    required: true
    type: string
  azure_subscription_id:
    description: 'Azure subscription ID'
    required: true
    type: string
  acr_username:
    description: 'Azure Container Registry username'
    required: true
    type: string
  acr_password:
    description: 'Azure Container Registry password'
    required: true
    type: string
  age_private_key:
    description: 'Age private key'
    required: true
    type: string
  storage_account_id:
    description: 'Azure Storage Account ID to store logs'
    required: true
    type: string
  app_name:
    description: 'Name of the Flask app (and file)'
    required: false
    default: 'app'
    type: string
  encrypted_env_file:
    description: 'Name of the encrypted environment file'
    required: false
    default: '.env.enc'
    type: string
  dockerfile:
    description: 'Dockefile for the container app'
    required: false
    default: './Dockerfile'
    type: string
  sops_version:
    description: 'Version of sops to use'
    required: false
    default: '3.8.1'
    type: string
  poetry_version:
    description: 'Version of poetry to use'
    required: false
    default: '1.7.1'
    type: string
  min_replicas:
    description: 'Minimum number of replicas for the container app'
    required: false
    default: '1'
    type: string
  max_replicas:
    description: 'Maximum number of replicas for the container app'
    required: false
    default: '1'
    type: string
  location:
    description: 'Location of the Azure Container Apps environment'
    required: false
    default: 'switzerlandnorth'
    type: string
  cache_tag:
    description: 'Tag to use for caching the docker build'
    required: false
    default: 'dockercache'
    type: string
  cpu:
    description: 'CPUs to allocate for the container app cores from 0.25 - 2.0, e.g. 0.5.'
    required: false
    default: '0.5'
  memory:
    description: 'Required memory from 0.5 - 4.0, will be converted to *Gi and Gi must not be supplied.'
    required: false
    default: '1'
outputs:
  fqdn:
    description: "Fully Qualified Domain Name of the deployed Container App"
    value: ${{ steps.get-fqdn.outputs.fqdn }}
  app_name:
    description: "Name of the deployed Container App"
    value: ${{ steps.get-fqdn.outputs.app_name }}
  location:
    description: "Azure Location of the deployed Container App"
    value: ${{ steps.get-fqdn.outputs.location }}
  environment:
    description: "Github Environment of the deployed Container App"
    value: ${{ steps.get-fqdn.outputs.environment }}
  resource_group_name:
    description: "Azure Resource Group of the deployed Container App"
    value: ${{ steps.get-fqdn.outputs.resource_group_name }}
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check requirements
      shell: bash
      run: |
        MODULE=${{ inputs.module }}
        ENCRYPTED_ENV_FILE=${{ inputs.encrypted_env_file }}
        # Check if MODULE only contains letters a-z and underscores
        if ! [[ "${MODULE}" =~ ^[a-z_]+$ ]]; then
          echo "The module name must only contain lowercase letters (a-z) and underscores."
          exit 1
        fi

        # Check for encrypted env file existence
        if [ ! -f "./${MODULE}/${ENCRYPTED_ENV_FILE}" ]; then
          echo "${ENCRYPTED_ENV_FILE} file does not exist in the folder ./${MODULE}"
          exit 1
        fi
        
        # Check for gunicorn and python-dotenv dependency in pyproject.toml
        GUNICORN_DEPENDENCY=$(cat ./${MODULE}/pyproject.toml | grep -E '^gunicorn\s*=')
        PYTHON_DOTENV_DEPENDENCY=$(cat ./${MODULE}/pyproject.toml | grep -E '^python-dotenv\s*=')
        
        if [ -z "$GUNICORN_DEPENDENCY" ] || [ -z "$PYTHON_DOTENV_DEPENDENCY" ]; then
          echo "pyproject.toml must specify a dependency to gunicorn and python-dotenv"
          exit 1
        fi
        echo "All requirements met."

    - name: Check inputs
      shell: bash
      run: |
        CPU=${{ inputs.module }}
        MEM=${{ inputs.memory }}
        
        is_valid_number() {
            number=$1
            lower_limit=$2
            upper_limit=$3
            re='^[0-9]+([.][0-9]+)?$'  # Regular expression for a valid number
            if echo "$number" | grep -Eq "$re"; then
                if [ "$(echo "$number >= $lower_limit" | bc -l)" = 1 ] && [ "$(echo "$number <= $upper_limit" | bc -l)" = 1 ]; then
                    return 0
                fi
            fi
            return 1
        }
        
        if ! is_valid_number "$CPU" 0.25 2; then
            echo "CPU setting is invalid, must be between 0.25 and 2!"
        fi

        if ! is_valid_number "$CPU" 0.5 4; then
            echo "Memory setting is invalid, must be between 0.5 and 4!"
        fi

        echo "All inputs valid."

    - name: Set up Azure CLI
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure_client_id }}
        tenant-id: ${{ inputs.azure_tenant_id }}
        subscription-id: ${{ inputs.azure_subscription_id }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ inputs.acr_login_server }}
        username: ${{ inputs.acr_username }}
        password: ${{ inputs.acr_password }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ inputs.module }}
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ inputs.acr_login_server }}/${{ inputs.module }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ inputs.acr_login_server }}/${{ inputs.module }}:${{ inputs.cache_tag }}
        cache-to: type=registry,ref=${{ inputs.acr_login_server }}/${{ inputs.module }}:${{ inputs.cache_tag }},mode=max
        build-args: |
          MODULE=${{ inputs.module }}
          APP_NAME=${{ inputs.app_name }}
          ENCRYPTED_ENV_FILE=${{ inputs.encrypted_env_file }}
          POETRY_VERSION=${{ inputs.poetry_version }}
          SOPS_VERSION=${{ inputs.sops_version }}

    - name: Set url-safe module name
      shell: bash
      env:
        INPUT_VARIABLE: ${{ inputs.module }}
        ENVIRONMENT_NAME: ${{ inputs.environment }}
      run: |
        URL_SAFE_MODULE_NAME="${INPUT_VARIABLE//_/-}-${ENVIRONMENT_NAME}"
        echo "URL_SAFE_MODULE_NAME=$URL_SAFE_MODULE_NAME" >> $GITHUB_ENV

    - name: Check if the Azure Container Apps Environment exists
      id: check_env
      uses: azure/cli@v2
      with:
        inlineScript: |
          exists=$(az containerapp env list --query "[?name=='${{ env.URL_SAFE_MODULE_NAME }}'].name" -o tsv)
          echo "Exists=$exists" >> $GITHUB_ENV
          
    - name: Create the Azure Container Apps Environment if it does not exist
      uses: azure/cli@v2
      if: env.Exists == ''
      with:
        inlineScript: |
          az containerapp env create --name ${{ env.URL_SAFE_MODULE_NAME }} --resource-group ${{ inputs.resource_group_name }} --location ${{ inputs.location }}

    - name: Update Azure Container Apps Environment
      uses: azure/cli@v2
      if: env.Exists != ''
      with:
        inlineScript: |
          az containerapp env update --name ${{ env.URL_SAFE_MODULE_NAME }} --resource-group ${{ inputs.resource_group_name }} --logs-destination azure-monitor

    - name: Add Diagnostic Setting
      uses: azure/cli@v2
      with:
        inlineScript: |
          az monitor diagnostic-settings create \
            --resource /subscriptions/${{ inputs.azure_subscription_id }}/resourceGroups/${{ inputs.resource_group_name }}/providers/Microsoft.App/managedEnvironments/${{ env.URL_SAFE_MODULE_NAME }} \
            -n ${{ env.URL_SAFE_MODULE_NAME }}-diagnostic-setting \
            --storage-account ${{ inputs.storage_account_id }} \
            --logs "[{category:ContainerAppConsoleLogs,enabled:true,retentionPolicy:{days:0,enabled:false}},{category:ContainerAppSystemLogs,enabled:false,retentionPolicy:{days:0,enabled:false}},{category:AppEnvSpringAppConsoleLogs,enabled:false,retentionPolicy:{days:0,enabled:false}}]" \
            --metrics "[{category:AllMetrics,enabled:false,retention-policy:{enabled:false,days:0}}]"

    - name: Extract ACR Name
      id: acr_extract
      shell: bash
      run: echo "ACR_NAME=$(echo ${{ inputs.acr_login_server }} | cut -d'.' -f1)" >> $GITHUB_ENV

    - name: Deploy Container App
      uses: Unique-AG/container-apps-deploy-action@v3
      with:
        containerAppName: ${{ env.URL_SAFE_MODULE_NAME }}
        resourceGroup: ${{ inputs.resource_group_name }}
        disableTelemetry: true
        acrName: ${{ env.ACR_NAME }}
        acrUsername: ${{ inputs.acr_username }}
        acrPassword: ${{ inputs.acr_password }}
        imageToDeploy: ${{ inputs.acr_login_server }}/${{ inputs.module }}:${{ github.sha }}
        location: ${{ inputs.location }}
        targetPort: 8080
        containerAppEnvironment: ${{ env.URL_SAFE_MODULE_NAME }}
        environmentVariables: SOPS_AGE_KEY=${{ inputs.age_private_key }}

    - name: Set Scaling for Container App
      uses: azure/cli@v2
      with:
        # TODO: Implement max_replicas
        # Can not use max_replicas as of now as we would need also need to define scaling settings that it works.
        inlineScript: |
          echo "🔔 Setting ${{ inputs.max_replicas }} is currently not supported and will default to the min_replicas ${{ inputs.min_replicas }} as of now, this means that auto-scaling is not active."
          az containerapp update \
            --name ${{ env.URL_SAFE_MODULE_NAME }} \
            --resource-group ${{ inputs.resource_group_name }} \
            --cpu ${{ inputs.cpu }} \
            --memory ${{ inputs.memory }}Gi \
            --min-replicas ${{ inputs.min_replicas }} \
            --max-replicas ${{ inputs.min_replicas }} 

    - name: Get FQDN of the Container App
      id: get-fqdn
      uses: azure/cli@v2
      with:
        inlineScript: |
          FQDN=$(az containerapp show --name ${{ env.URL_SAFE_MODULE_NAME }} --resource-group ${{ inputs.resource_group_name }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
          echo "app_name=${{ env.URL_SAFE_MODULE_NAME }}" >> $GITHUB_OUTPUT
          echo "location=${{ inputs.location }}" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "resource_group_name=${{ inputs.resource_group_name }}" >> $GITHUB_OUTPUT
